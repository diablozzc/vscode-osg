---
description:
globs:
alwaysApply: false
---
# 开发工作流程指南

## npm 脚本说明

查看 [package.json](mdc:package.json) 中定义的脚本：

- `npm run compile` - 编译 TypeScript 代码到 `out/` 目录
- `npm run watch` - 监听模式编译，开发时使用
- `npm test` - 运行测试套件
- `npm run package` - 编译并使用自定义脚本打包 VSIX
- `npm run package-vsce` - 使用官方 vsce 工具打包
- `npm run lint` - 运行 ESLint 代码检查
- `npm run clean` - 清理构建产物

## 开发环境设置

1. **前置要求**：
   - Node.js 16.x+
   - VS Code 1.74.0+
   - Git

2. **安装依赖**：
   ```bash
   npm install
   ```

3. **开发模式**：
   - 运行 `npm run compile` 编译代码
   - 在 VS Code 中按 F5 启动调试模式
   - 这会打开新的 Extension Development Host 窗口

## 构建和打包

### 自定义打包脚本

使用 [scripts/package.js](mdc:scripts/package.js) 进行打包：
- 自动编译 TypeScript
- 包含所有必要的资源文件
- 输出到 `dist/vscode-osg-0.1.0.vsix`
- 支持的文件路径已更新为新的目录结构

### 文件路径映射

重要：由于项目重构，文件路径已更新：
- ✅ `resources/syntaxes/osg.tmLanguage.json` - 语法定义
- ✅ `resources/snippets/osg.json` - 代码片段
- ✅ `language-configuration.json` - 语言配置
- ✅ `out/extension.js` - 编译后的主文件

## 代码质量

配置文件：
- [.eslintrc.json](mdc:.eslintrc.json) - ESLint 规则
- [.prettierrc](mdc:.prettierrc) - 代码格式化规则
- [.gitignore](mdc:.gitignore) - Git 忽略规则

运行检查：
```bash
npm run lint
```

## 测试

测试文件组织：
- `test/suite/` - 测试代码（计划中）
- `test/fixtures/` - 测试数据文件
- 查看 [test/README.md](mdc:test/README.md) 了解详细测试说明

## CI/CD

GitHub Actions 配置在 [.github/workflows/ci.yml](mdc:.github/workflows/ci.yml)：
- 支持 Node.js 16.x, 18.x, 20.x
- 自动运行 lint、test、compile、package
- 主分支推送时自动构建和发布

## 发布流程

1. 更新版本号和 [docs/CHANGELOG.md](mdc:docs/CHANGELOG.md)
2. 运行 `npm run package` 创建 VSIX
3. 测试安装：`code --install-extension dist/vscode-osg-0.1.0.vsix`
4. 推送到主分支触发 CI/CD
5. 手动发布到 VS Code 市场（如需要）
